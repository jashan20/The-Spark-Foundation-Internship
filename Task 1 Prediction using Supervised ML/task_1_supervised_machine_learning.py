# -*- coding: utf-8 -*-
"""Task 1 - Supervised Machine Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oh7IUeQ1EaAkQ9E2bxh4QSdWFzAecz5W

#Author - **JASHANDEEP SINGH**  <img src="https://internship.thesparksfoundation.info/assests/img/logo.png" alt="drawing" width="50"/>  
##GRIP - The Spark Foundation- Data Science & Business Analytics Internship
[**TASK 1**](https://) Predict the percentage of a student based on the no. of study hours.


### **Linear Regression with Python Scikit Learn**
In this section we will see how the Python Scikit-Learn library for machine learning can be used to implement regression functions. We will start with simple linear regression involving two variables.

### **Simple Linear Regression**
In this regression task we will predict the percentage of marks that a student is expected to score based upon the number of hours they studied. This is a simple linear regression task as it involves just two variables.
"""



"""##**Importing libraries**

Pandas,Numpy for data manuplation.

Matplotlib,Seaborn module for Data Visualisation.

Sklearn for modelling.
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

"""## **Importing Dataset**"""

# Reading data from remote link
url = "http://bit.ly/w-data"
scores = pd.read_csv(url)
print("Data imported successfully")
scores.head(10)

print('Shape of the Dataset-->',scores.shape)
print ('Columns names -->',scores.columns)
print ('Columns Datatype -->', scores.dtypes)

"""##**Exploratory Analysis of the DataSet**

For achieving better results from the applied model in Machine Learning projects the format of the data has to be in a proper manner.We will have to check for the following 

1.   Missing values
2.   Outliers

###Missing Values
"""

c = scores.isnull().sum()
print(c)
sns.heatmap(scores.isnull(), cbar=False)

"""Observations:
There are no missing values in this dataset.

###Outliers
"""

#percentile of each Predictors
scores.quantile([0.01,.05,.10,.15 ,.25,.5,.8,.85,0.9,.95,.99,1])
# to check the outliers in the data by plotting the boxplot
scores.boxplot(['Hours'])

scores.boxplot(['Scores'])

"""##**Visualising Data**
Let's plot our data points on 2-D graph to eyeball our dataset and see if we can manually find any relationship between the data. We can create the plot with the following script:
"""

# Plotting the distribution of scores
sns.distplot(scores['Scores'], bins=10)
plt.show()

s_data.plot(x='Hours', y='Scores', style='*')  
plt.title('Hours vs Percentage')  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')  
plt.show()

"""##**Preparing the training data for Linear Regression**
Independent variable = Number of hours studied

Dependent variable = Scores obtained
"""

X = s_data.iloc[:, :-1].values  
y = s_data.iloc[:, 1].values

"""Now that we have our attributes and labels, the next step is to split this data into training and test sets. We'll do this by using Scikit-Learn's built-in train_test_split() method:"""

from sklearn.model_selection import train_test_split  
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) 
print(X_train.shape)
print(y_train.shape)
print(X_test.shape)
print(y_test.shape)



"""##**Training the Algorithm**
We have split our data into training and testing sets, and now is finally the time to train our algorithm.
"""

from sklearn.linear_model import LinearRegression  
regressor = LinearRegression()  
regressor.fit(X_train, y_train) 

print("Training complete.")

# Plotting the regression line
line = regressor.coef_*X+regressor.intercept_

# Plotting for the test data
plt.scatter(X, y)
plt.plot(X, line);
plt.show()



"""## **Making Predictions**
Now that we have trained our algorithm, it's time to make some predictions.
"""

print(X_test) # Testing data - In Hours
y_pred = regressor.predict(X_test) # Predicting the scores
# Comparing Actual vs Predicted
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  
df



"""# **What will be predicted score if a student study for 9.25 hrs in a day?**"""

study_hours = 9.25
score_pred = regressor.predict([[study_hours]])
print("Number of hours = {}".format(study_hours))
print("Predicted scores = {}".format(score_pred[0]))

"""###Alternative way to calculate the score of the student"""

#Using the formula y = mx + c , where m = coeffiecient , c = intercept
y = regressor.coef_*9.25 + regressor.intercept_
y



"""## **Evaluating the model**

The final step is to evaluate the performance of algorithm. This step is particularly important to compare how well different algorithms perform on a particular dataset. 
We will evaluate our model using error metrics like :
    
    mean_absolute_error,
    mean_squared_error,
    R2_score,
"""

print('Mean absolute error : ', metrics.mean_absolute_error(y_test, y_pred))
print('Mean square error : ',metrics.mean_squared_error(y_test,y_pred))
print('Root mean square error : ', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))
print("Goodness of Fit-R2",metrics.r2_score(y_test,y_pred))

